/*способ хранения указателей сильно влияет на производительность сборщика мусора, особенно
когда мы имеем дело с очень большим количеством указателей*/

package main

import (
	"runtime"
)

type data struct {
	i, j int
}

func main() {
	var N = 40000000
	var structure []data

	//цикл for здесь необходим для помещения всех значений в структуры, которые хранятся в срезе.
	for i := 0; i < N; i++ {
		value := int(i)
		structure = append(structure, data{value, value})
	}

	runtime.GC()
	_ = structure[0] // Использует первый элемент structure, чтобы предотвратить его удаление компилятором во время оптимизации.
}

/*хеш-таблицы замедляют сборщик мусора Go, в то время как
срезы работают с ним гораздо лучше. Следует отметить, что это не проблема хеш-
таблиц, а результат работы сборщика мусора Go*/
